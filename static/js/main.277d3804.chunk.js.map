{"version":3,"sources":["App.js","Crypto-module.js","serviceWorker.js","index.js"],"names":["App","useState","value","setValue","privateValue","setPrivate","outputValue","setOutputValue","onSend","val","output","data","crypt","Crypt","md","privateKey","localStorage","getItem","console","log","signature","JSON","parse","getCryptData","generate","RSA","keySize","entropy","generateKeyPairAsync","then","keys","setItem","catch","error","getRSAKey","className","type","onChange","e","currentTarget","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8RAuCeA,MAnCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEwBF,mBAAS,IAFjC,mBAEJG,EAFI,KAEUC,EAFV,OAG2BJ,mBAAS,IAHpC,mBAGJK,EAHI,KAGSC,EAHT,KAKLC,EAAS,SAACC,GACZ,IAAIC,ECRgB,SAACC,GACzB,IAAIC,EAAQ,IAAIC,QAAM,CAACC,GAAI,WACvBC,EAAaC,aAAaC,QAAQ,cACtC,OAAIF,GACAG,QAAQC,IAAIP,EAAMQ,UAAUL,EAAYJ,IACrBU,KAAKC,MAAMV,EAAMQ,UAAUL,EAAYJ,IACtCS,WACT,GDCEG,CAAad,GAC1BS,QAAQC,IAAI,eAAgBT,GAC5BH,EAAeG,IAGbc,EAAW,SAACtB,ICHG,SAACA,GACZ,IAAIuB,MAAI,CAAEC,QAAS,KAAMC,QAASzB,IAExC0B,uBACCC,MAAK,SAAAC,GACFd,aAAae,QAAQ,aAAcD,EAAKf,YACxCG,QAAQC,IAAI,aAAcW,EAAKf,eAElCiB,OAAM,SAAAC,GACHf,QAAQC,IAAIc,MDLhBC,CAAUhC,IAGd,OACI,yBAAKiC,UAAU,OACX,6BACI,2BAAOC,KAAK,OAAOlC,MAAOE,EAAciC,SAAU,SAACC,GAAD,OAAOjC,EAAWiC,EAAEC,cAAcrC,UACpF,4BAAQsC,QAAS,kBAAMhB,EAASpB,KAAhC,8BAGJ,6BACI,2BAAOgC,KAAK,OAAOlC,MAAOA,EAAOmC,SAAU,SAACC,GAAD,OAAOnC,EAASmC,EAAEC,cAAcrC,UAC3E,4BAAQsC,QAAS,kBAAMhC,EAAON,KAA9B,2DAGJ,yBAAKiC,UAAW,UAAhB,eAEI,8BAAO7B,EAAP,QErBImC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMuB,c","file":"static/js/main.277d3804.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {getCryptData, getRSAKey} from \"./Crypto-module\";\n\nfunction App() {\n    const [value, setValue] = useState('');\n    const [privateValue, setPrivate] = useState('');\n    const [outputValue, setOutputValue] = useState('');\n\n    const onSend = (val) => {\n        let output = getCryptData(val);\n        console.log('output value', output);\n        setOutputValue(output);\n    };\n\n    const generate = (value) => {\n        getRSAKey(value);\n    };\n\n    return (\n        <div className=\"App\">\n            <div>\n                <input type=\"text\" value={privateValue} onChange={(e) => setPrivate(e.currentTarget.value)}/>\n                <button onClick={() => generate(privateValue)}> generate RSA private key</button>\n            </div>\n\n            <div>\n                <input type=\"text\" value={value} onChange={(e) => setValue(e.currentTarget.value)}/>\n                <button onClick={() => onSend(value)}>Отправить</button>\n            </div>\n\n            <div className={'output'}>\n                OutputValue:\n                <span>{outputValue} </span>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import {Crypt, RSA} from 'hybrid-crypto-js';\r\n\r\nexport const getCryptData = (data) => {\r\n    let crypt = new Crypt({md: 'sha256'});\r\n    let privateKey = localStorage.getItem('privateKey');\r\n    if (privateKey) {\r\n        console.log(crypt.signature(privateKey, data));\r\n        let signatureObj = JSON.parse(crypt.signature(privateKey, data));\r\n        return signatureObj.signature\r\n    } else return  ''\r\n};\r\n\r\nexport const getRSAKey = (value) => {\r\n    let rsa = new RSA({ keySize: 1024, entropy: value });\r\n    // let rsa = new RSA({entropy: value});\r\n    rsa.generateKeyPairAsync()\r\n        .then(keys => {\r\n            localStorage.setItem('privateKey', keys.privateKey);\r\n            console.log('privateKey', keys.privateKey);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}